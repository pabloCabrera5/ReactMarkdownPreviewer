{"version":3,"sources":["components/Toolbar.js","components/Editor.jsx","components/Previewer.js","App.js","constants/data.js","serviceWorker.js","index.js"],"names":["Toolbar","props","className","title","Editor","_onChange","e","sendText","target","value","id","onChange","this","defaultValue","text","Component","Previewer","children","source","App","_receiveText","data","setState","state","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4MAGaA,G,kBAAU,SAACC,GAAD,OACnB,yBAAKC,UAAU,WACX,uBAAGC,MAAM,oBAAoBD,UAAU,OACtCD,EAAME,SCgBFC,EAAb,4MAEIC,UAAY,SAACC,GACT,EAAKL,MAAMM,SAASD,EAAEE,OAAOC,QAHrC,uDAOQ,OACI,yBAAKP,UAAU,UACX,kBAAC,EAAD,CAASC,MAAM,WACf,8BAAUO,GAAG,SAASC,SAAUC,KAAKP,UAAWQ,aAAcD,KAAKX,MAAMa,YAVzF,GAA4BC,a,yBChBfC,EAAY,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACvB,OACI,yBAAKf,UAAU,aACX,kBAAC,EAAD,CAASC,MAAM,cACf,yBAAKO,GAAG,WACJ,kBAAC,IAAD,CAAeQ,OAAQD,OCsBxBE,G,yDAxBb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAKRmB,aAAe,SAACC,GACd,EAAKC,SAAS,CACZR,KAAOO,KANT,EAAKE,MAAQ,CACXT,KCZc,irCDSC,E,qDAYjB,OACE,yBAAKZ,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAQK,SAAUK,KAAKQ,aAAcN,KAAMF,KAAKW,MAAMT,OACtD,kBAAC,EAAD,KAAYF,KAAKW,MAAMT,Y,GAjBfC,cEIES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2cb1c47b.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/toolbar.css'\r\n\r\nexport const Toolbar = (props) => (\r\n    <div className='toolbar'>\r\n        <i title=\"no-stack-dub-sack\" className=\"fa\"></i>\r\n        {props.title}\r\n    </div>\r\n)","import React, { Component } from 'react';\r\nimport '../styles/editor.css';\r\nimport { Toolbar } from './Toolbar';\r\n\r\n//const urlMarkdownCheatSheet = 'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet';\r\n\r\n// Stateless/Presentational Component\r\n/*\r\nexport const Editor = (props) => {\r\n\r\n    const _onChange = (e) => {\r\n        props.sendText(e.target.value);\r\n    }\r\n    return (\r\n        <div className='editor'>\r\n            <Toolbar title='Editor' />\r\n            <textarea id='editor' onChange={_onChange} defaultValue={props.text}>\r\n            </textarea>\r\n        </div>\r\n    )\r\n}\r\n */\r\nexport class Editor extends Component {\r\n\r\n    _onChange = (e) => {\r\n        this.props.sendText(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='editor'>\r\n                <Toolbar title='Editor' />\r\n                <textarea id='editor' onChange={this._onChange} defaultValue={this.props.text}>\r\n                </textarea>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport '../styles/previewer.css';\r\n\r\nimport ReactMarkdown from 'react-markdown';\r\nimport { Toolbar } from './Toolbar';\r\n\r\nexport const Previewer = ({children}) => {\r\n    return (\r\n        <div className='previewer' >\r\n            <Toolbar title='Previewer'></Toolbar>\r\n            <div id='preview'>\r\n                <ReactMarkdown source={children} />\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n\r\n}","import React, { Component } from 'react';\n\nimport './App.css';\nimport { Editor } from './components/Editor';\nimport { Previewer } from './components/Previewer';\nimport marked from \"marked\";\nimport { TEXT } from './constants/data';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: TEXT\n    }\n  }\n  _receiveText = (data) => {\n    this.setState({\n      text: (data)\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Editor sendText={this._receiveText} text={this.state.text} />\n          <Previewer>{this.state.text}</Previewer>\n        </header>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","export const TEXT = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHeres some code, `+ '`< div ></div>`'+` , between 2 backticks. \r\n`+'```' \r\n+`\r\n\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '' && lastLine == '') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n`\r\n+ '```'\r\n+`\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.google.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n            `;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}